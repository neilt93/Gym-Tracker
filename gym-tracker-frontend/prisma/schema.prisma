generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(cuid())
  name            String
  email           String           @unique
  goals           String[]
  experienceLevel String
  preferredUnit   String
  height          Float
  weight          Float
  age             Int
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  workouts        Workout[]
  bodyMeasurements BodyMeasurement[]
  meals           Meal[]
  progressPhotos  ProgressPhoto[]
  personalRecords PersonalRecord[]
  journalEntries  JournalEntry[]
  aiInteractions AIInteraction[]
  analyticsData   AnalyticsData[]
  aiChats         AIChat[]
}

model Workout {
  id          String         @id @default(uuid())
  name        String         // e.g., "Push Day", "Pull Day"
  startedAt   DateTime       @default(now())
  endedAt     DateTime?
  user        User           @relation(fields: [userId], references: [id])
  userId      String
  exerciseSets ExerciseSet[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model ExerciseSet {
  id          String   @id @default(uuid())
  workout     Workout  @relation(fields: [workoutId], references: [id])
  workoutId   String
  exercise    Exercise @relation(fields: [exerciseId], references: [id])
  exerciseId  String
  reps        Int
  weight      Float
  rpe         Int?
  duration    Float?   // for cardio exercises (in minutes)
  intensity   Float?   // for cardio exercises (1-10 scale)
  setIndex    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Exercise {
  id          String         @id @default(uuid())
  name        String         @unique
  description   String?
  difficulty    Difficulty    @default(INTERMEDIATE)
  equipment     String?
  videoUrl      String?
  muscleGroup   MuscleGroup
  targetMuscles String[]      // array of target muscles
  exerciseSets ExerciseSet[]
  personalRecords PersonalRecord[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model ProgressPhoto {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  imageUrl  String
  date      DateTime
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BodyMeasurement {
  id        String   @id @default(cuid())
  weight    Float
  timestamp DateTime
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model PersonalRecord {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  exerciseId String
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  weight     Float
  reps       Int
  date       DateTime
  notes      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Meal {
  id        String   @id @default(cuid())
  name      String
  image     String?  // Base64ed image
  protein   Float
  carbs     Float
  fat       Float
  calories  Int
  timestamp DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model JournalEntry {
  id        String   @id @default(cuid())
  content   String
  goals     String?
  notes     String?
  timestamp DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([timestamp])
}

model AIInteraction {
  id          String   @id @default(cuid())
  type        String   // workout_tips", mood_insights",journal_analysis",nutrition_advice"
  userInput   String
  aiResponse  String
  timestamp   DateTime @default(now())
  userId      String
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([timestamp])
}

model AnalyticsData {
  id                String   @id @default(cuid())
  date              DateTime
  totalCalories     Int?
  totalProtein      Float?
  totalCarbs        Float?
  totalFat          Float?
  workoutDuration   Int?     // minutes
  workoutIntensity  Float?   // average intensity
  moodScore         Float?   // average mood
  energyScore       Float?   // average energy
  stressScore       Float?   // average stress
  sleepHours        Float?   // average sleep
  weight            Float?
  notes             String?
  userId            String
  user              User     @relation(fields: [userId], references: [id])

  @@unique([userId, date])
  @@index([userId])
  @@index([date])
}

model AIChat {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  question  String
  response  String
  timestamp DateTime @default(now())

  @@index([userId])
  @@index([timestamp])
}

enum MuscleGroup {
  CHEST
  BACK
  LEGS
  SHOULDERS
  ARMS
  CORE
  FULL_BODY
}

enum WorkoutStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum WorkoutType {
  STRENGTH
  CARDIO
  HIIT
  FLEXIBILITY
  RECOVERY
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum ExperienceLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum Unit {
  KG
  LBS
}
